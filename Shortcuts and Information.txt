clg -> console.log
log -> console.log

Falsy Values:
    -> false
    -> null : Can be set by programmers
    -> undefined : Can be set by the Js Compiler. 
    -> 0
    -> -0
    -> NaN
    -> '', "", ``  (Empty Quotes)
Everything other than is Truthy Value. 
Number +  undefined = NaN

=== strict Equality (type + value)
!== strict Non-equality (type + value)


Method : Description
1. concat() : Join  two or more arrays and return it as result
2. includes() : Checks if any elements contains specific elements
3. push() : adds the new element to the end of array and returns the length of the new array. 
4. unshift() : Adds the new elemet in the beginnig os the array and returns the new leght of the array. 
5. pop() : Removes the last element of the array and return the removed element. 
6. shift() : Removes the first element of the array and return the removed element. 
7. sort() : sorts the elements in alphabetical order and in ascending. 
8. slice() : Select a part of an array and returns the new array. 
9. splice() : removes or replaces existing elements and/or addss the new data. 

let fruits = ["Apple", "Mango", "Banana", "Pineapple", "DragonFruit"];
fruits.splice(1, 2, "panda", "not fruit", "Carrot");
console.log(fruits);
OutPut:
(6)Â ['Apple', 'panda', 'not fruit', 'Carrot', 'Pineapple', 'DragonFruit']


JSON:
JSON type to javascript type = stringify ()
javascript type to JSON type = parse ()


Date and Time:
let panda = new Date(2002, 9, 15, 12, 30, 0, 0);
Format:
let panda = new Date(year, month, date, hours, minutes, seconds, milliseconds);
Months starts from 0 and ends with 11. 
There are many formats in dates. Check Documentation. 

setInterval: No delay in executing
setInterval(
  () => console.log(`This function will be executed for every 2 seconds ${i}`),
  2000
);

setTimeout: Will execute after a delay
setTimeout(function () {
  console.log(`this function will execute after 3 seconds`);
}, 3000);

clearInterval:
let intervalId = setInterval(function () {
  console.log(`This function is being executed at the interval`);
}, 1000);
setTimeout(() => {
  clearInterval(intervalId);
  console.log(`Interval Stopped`);
}, 10000);


